(self.webpackChunkstorybooknew=self.webpackChunkstorybooknew||[]).push([[175],{"./stories/LineChart.stories.js":(__unused_webpack_module,__webpack_exports__,__webpack_require__)=>{"use strict";__webpack_require__.r(__webpack_exports__),__webpack_require__.d(__webpack_exports__,{CustomData:()=>CustomData,CustomOptions:()=>CustomOptions,Default:()=>Default,__namedExportsOrder:()=>__namedExportsOrder,default:()=>LineChart_stories});var react=__webpack_require__("./node_modules/react/index.js"),dist=(__webpack_require__("./node_modules/chart.js/auto/auto.js"),__webpack_require__("./node_modules/react-chartjs-2/dist/index.js")),jsx_runtime=__webpack_require__("./node_modules/react/jsx-runtime.js");const LineChart=({data,onClick,onPlayData})=>(0,jsx_runtime.jsx)("div",{children:(0,jsx_runtime.jsx)(dist.x1,{data,onClick,onPlayData})});LineChart.displayName="LineChart",LineChart.__docgenInfo={description:"",methods:[],displayName:"LineChart"};const stories_LineChart=LineChart;var addon_actions_dist=__webpack_require__("./node_modules/@storybook/addon-actions/dist/index.mjs");__webpack_require__("./node_modules/@testing-library/react/dist/@testing-library/react.esm.js"),__webpack_require__("./node_modules/@testing-library/user-event/dist/esm/index.js");const LineChart_stories={title:"LineChart",component:stories_LineChart,tags:["autodocs"],parameters:{layout:"fullscreen"},argTypes:{data:{description:"The data to be displayed in the chart.",control:{type:"object"}},options:{description:"Additional options for customizing the chart.",control:{type:"object"}},onClick:{description:"Event when the chart is clicked.",action:"clicked"},playData:{description:"Randomly update data for the chart.",control:{type:"button"},action:"dataPlayed"}}},Template=args=>{const defaultData={labels:[],datasets:[]},[chartData,setChartData]=react.useState(args.data||defaultData);react.useEffect((()=>{setChartData(args.data||defaultData)}),[args.data]);return(0,jsx_runtime.jsx)(stories_LineChart,{data:chartData,...args,onPlayData:()=>{if(!chartData.labels||!chartData.datasets)return;const newData={labels:chartData.labels,datasets:chartData.datasets.map((dataset=>({...dataset,data:dataset.data.map((()=>Math.floor(50*Math.random())))})))};setChartData(newData),args.playData&&args.playData()}})};Template.displayName="Template";const Default=Template.bind({});Default.args={data:{labels:["January","February","March","April","May","June"],datasets:[{label:"My First dataset",backgroundColor:"rgb(255, 99, 132)",borderColor:"rgb(255, 99, 132)",data:[0,10,5,2,20,30,45]}],onClick:(0,addon_actions_dist.aD)("chart-clicked")}};const CustomData=Template.bind({});CustomData.args={data:{labels:["Jan","Feb","Mar"],datasets:[{label:"Custom Data",backgroundColor:"rgb(75, 192, 192)",borderColor:"rgb(75, 192, 192)",data:[10,20,30]}]}};const CustomOptions=Template.bind({});CustomOptions.args={data:{labels:["Jan","Feb","Mar"],datasets:[{label:"Custom Options",backgroundColor:"rgb(255, 99, 132)",borderColor:"rgb(255, 99, 132)",data:[5,15,25]}]},options:{}},Default.parameters={...Default.parameters,docs:{...Default.parameters?.docs,source:{originalSource:"args => {\n  const defaultData = {\n    labels: [],\n    datasets: []\n  };\n  const [chartData, setChartData] = React.useState(args.data || defaultData);\n  React.useEffect(() => {\n    setChartData(args.data || defaultData);\n  }, [args.data]);\n  const handlePlayData = () => {\n    if (!chartData.labels || !chartData.datasets) return;\n    const newData = {\n      labels: chartData.labels,\n      datasets: chartData.datasets.map(dataset => ({\n        ...dataset,\n        data: dataset.data.map(() => Math.floor(Math.random() * 50))\n      }))\n    };\n    setChartData(newData);\n    args.playData && args.playData();\n  };\n  return <LineChart data={chartData} {...args} onPlayData={handlePlayData} />;\n}",...Default.parameters?.docs?.source}}},CustomData.parameters={...CustomData.parameters,docs:{...CustomData.parameters?.docs,source:{originalSource:"args => {\n  const defaultData = {\n    labels: [],\n    datasets: []\n  };\n  const [chartData, setChartData] = React.useState(args.data || defaultData);\n  React.useEffect(() => {\n    setChartData(args.data || defaultData);\n  }, [args.data]);\n  const handlePlayData = () => {\n    if (!chartData.labels || !chartData.datasets) return;\n    const newData = {\n      labels: chartData.labels,\n      datasets: chartData.datasets.map(dataset => ({\n        ...dataset,\n        data: dataset.data.map(() => Math.floor(Math.random() * 50))\n      }))\n    };\n    setChartData(newData);\n    args.playData && args.playData();\n  };\n  return <LineChart data={chartData} {...args} onPlayData={handlePlayData} />;\n}",...CustomData.parameters?.docs?.source}}},CustomOptions.parameters={...CustomOptions.parameters,docs:{...CustomOptions.parameters?.docs,source:{originalSource:"args => {\n  const defaultData = {\n    labels: [],\n    datasets: []\n  };\n  const [chartData, setChartData] = React.useState(args.data || defaultData);\n  React.useEffect(() => {\n    setChartData(args.data || defaultData);\n  }, [args.data]);\n  const handlePlayData = () => {\n    if (!chartData.labels || !chartData.datasets) return;\n    const newData = {\n      labels: chartData.labels,\n      datasets: chartData.datasets.map(dataset => ({\n        ...dataset,\n        data: dataset.data.map(() => Math.floor(Math.random() * 50))\n      }))\n    };\n    setChartData(newData);\n    args.playData && args.playData();\n  };\n  return <LineChart data={chartData} {...args} onPlayData={handlePlayData} />;\n}",...CustomOptions.parameters?.docs?.source}}};const __namedExportsOrder=["Default","CustomData","CustomOptions"]},"?4f7e":()=>{}}]);